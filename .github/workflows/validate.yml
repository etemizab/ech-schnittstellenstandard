name: Validate Schemas & OpenAPI

on:
  pull_request:
    paths:
      - "schemas/**"
      - "openapi/**"
  push:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Node.js einrichten
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3) CLI-Tools installieren
      - name: Install CLI tools
        run: |
          npm install -g @redocly/cli swagger-cli ajv-cli ajv-formats

      # 4) OpenAPI validieren & linten
      - name: Validate OpenAPI (swagger-cli + redocly)
        run: |
          echo "üîç Validating OpenAPI specifications..."
          swagger-cli validate openapi/*.yaml
          # Lint gibt Best-Practice-Hinweise, blockiert aber nicht
          npx @redocly/cli lint openapi/*.yaml || true

      # 5) JSON Schemas: compile f√ºr Dateien ohne $ref
      - name: Compile JSON Schemas without $ref (draft 2020-12)
        shell: bash
        run: |
          echo "üîç Compiling JSON Schemas without $ref..."
          NOREF_SCHEMAS=$(grep -L '"\$ref"' -R schemas --include '*.json' || true)
          for f in $NOREF_SCHEMAS; do
            if [ -f "$f" ]; then
              echo "‚Üí ajv compile $f"
              npx ajv compile --spec=draft2020 -c ajv-formats -s "$f"
            fi
          done

      # 6) JSON Schemas: validate f√ºr Dateien mit $ref (l√§dt Refs via -r)
      - name: Validate JSON Schemas with $ref (draft 2020-12)
        shell: bash
        run: |
          echo "üîç Validating JSON Schemas with $ref..."

          # Minimal g√ºltiges Beispiel passend zu person.json (bei Bedarf anpassen/erweitern)
          cat > /tmp/person-min.json <<'JSON'
          {
            "personIdentification": { "ahvNumber": "1234567890123", "localId": "abc" },
            "nameData": { "officialName": "Muster", "firstName": "Max" },
            "birthData": {
              "dateOfBirth": "1990-01-01",
              "placeOfBirth": { "country": "CH", "municipalityName": "Bern" },
              "sex": 1
            },
            "religionData": { "religion": 0 },
            "nationalityData": {
              "status": 2,
              "countries": [ { "country": "CH", "validFrom": "1990-01-01" } ]
            },
            "residence": {
              "reportingMunicipality": { "municipalityName": "Bern", "cantonAbbreviation": "BE" },
              "typeOfResidence": 1,
              "arrivalDate": "2020-01-01",
              "dwellingAddress": { "typeOfHousehold": 1, "validFrom": "2020-01-01" }
            }
          }
          JSON

          # Alle Schemas als m√∂gliche Refs einsammeln
          REFS=$(find schemas -name '*.json' -type f -print0 | xargs -0 echo)

          # Alle Schemas mit $ref validieren (nutzt -r zum Laden der referenzierten Dateien)
          REF_SCHEMAS=$(grep -l '"\$ref"' -R schemas --include '*.json' || true)
          for f in $REF_SCHEMAS; do
            echo "‚Üí ajv validate (with refs) $f"
            # Standardm√§√üig Beispiel f√ºr person.json verwenden; wenn du weitere Top-Level-Schemas hast,
            # kannst du hier je nach $f andere Beispiel-Dateien w√§hlen.
            npx ajv validate --spec=draft2020 -c ajv-formats -s "$f" -r $REFS -d /tmp/person-min.json >/dev/null || \
            (echo "‚ùå Example may not fit $f ‚Äî adjust /tmp/*.json accordingly" && exit 1)
          done

      # 7) Zusammenfassung
      - name: Summary
        run: echo "‚úÖ OpenAPI and JSON Schema validation finished."

      # --- 6. Zusammenfassung ---
      - name: Summary
        run: echo "‚úÖ OpenAPI and JSON Schema validation finished successfully."
